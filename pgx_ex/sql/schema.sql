/* 
This file is auto generated by pgx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/lib.rs:13
-- pgx_ex::my_generate_seris
CREATE FUNCTION "my_generate_seris"(
        "start" integer, /* i32 */
        "end" integer, /* i32 */
        "step" integer /* i32 */
) RETURNS SETOF integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'my_generate_seris_wrapper';

-- src/lib.rs:18
-- pgx_ex::to_lowercase
CREATE FUNCTION "to_lowercase"(
        "str" text /* &str */
) RETURNS text /* alloc::string::String */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'to_lowercase_wrapper';

-- src/lib.rs:8
-- pgx_ex::hello_pgx_ex
CREATE FUNCTION "hello_pgx_ex"() RETURNS text /* &str */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hello_pgx_ex_wrapper';

-- src/sorted_id.rs:14
-- pgx_ex::sorted_id::SortedId
CREATE TYPE SortedId;

-- src/sorted_id.rs:14
-- pgx_ex::sorted_id::sortedid_in
CREATE FUNCTION "sortedid_in"(
        "input" cstring /* &cstr_core::CStr */
) RETURNS SortedId /* pgx_ex::sorted_id::SortedId */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_in_wrapper';

-- src/sorted_id.rs:14
-- pgx_ex::sorted_id::sortedid_out
CREATE FUNCTION "sortedid_out"(
        "input" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS cstring /* &cstr_core::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_out_wrapper';

-- src/sorted_id.rs:14
-- pgx_ex::sorted_id::SortedId
CREATE TYPE SortedId (
        INTERNALLENGTH = variable,
        INPUT = sortedid_in, /* pgx_ex::sorted_id::sortedid_in */
        OUTPUT = sortedid_out, /* pgx_ex::sorted_id::sortedid_out */
        STORAGE = extended
);

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_cmp
CREATE FUNCTION "sortedid_cmp"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS integer /* i32 */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_cmp_wrapper';

-- src/sorted_id.rs:15
-- pgx_ex::sorted_id::sortedid_ne
CREATE FUNCTION "sortedid_ne"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_ne_wrapper';

-- src/sorted_id.rs:15
-- pgx_ex::sorted_id::sortedid_ne
CREATE OPERATOR <> (
        PROCEDURE="sortedid_ne",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        NEGATOR = =,
        RESTRICT = neqsel,
        JOIN = neqjoinsel
);

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_lt
CREATE FUNCTION "sortedid_lt"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_lt_wrapper';

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_lt
CREATE OPERATOR < (
        PROCEDURE="sortedid_lt",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        COMMUTATOR = >,
        NEGATOR = >=,
        RESTRICT = scalarltsel,
        JOIN = scalarltjoinsel
);

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_ge
CREATE FUNCTION "sortedid_ge"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_ge_wrapper';

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_ge
CREATE OPERATOR >= (
        PROCEDURE="sortedid_ge",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        COMMUTATOR = <=,
        NEGATOR = <,
        RESTRICT = scalargesel,
        JOIN = scalargejoinsel
);

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_le
CREATE FUNCTION "sortedid_le"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_le_wrapper';

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_le
CREATE OPERATOR <= (
        PROCEDURE="sortedid_le",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        COMMUTATOR = >=,
        NEGATOR = >,
        RESTRICT = scalarlesel,
        JOIN = scalarlejoinsel
);

-- src/sorted_id.rs:17
-- pgx_ex::sorted_id::sortedid_hash
CREATE FUNCTION "sortedid_hash"(
        "value" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS integer /* i32 */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_hash_wrapper';

-- src/sorted_id.rs:17
-- pgx_ex::sorted_id::SortedId
CREATE OPERATOR FAMILY SortedId_hash_ops USING hash;
CREATE OPERATOR CLASS SortedId_hash_ops DEFAULT FOR TYPE SortedId USING hash FAMILY SortedId_hash_ops AS
        OPERATOR    1   =  (SortedId, SortedId),
        FUNCTION    1   sortedid_hash(SortedId);

-- src/sorted_id.rs:15
-- pgx_ex::sorted_id::sortedid_eq
CREATE FUNCTION "sortedid_eq"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_eq_wrapper';

-- src/sorted_id.rs:15
-- pgx_ex::sorted_id::sortedid_eq
CREATE OPERATOR = (
        PROCEDURE="sortedid_eq",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        NEGATOR = <>,
        RESTRICT = eqsel,
        JOIN = eqjoinsel,
        HASHES,
        MERGES
);

-- src/sorted_id.rs:52
-- pgx_ex::sorted_id::get_sorted_id
CREATE FUNCTION "get_sorted_id"() RETURNS SortedId /* pgx_ex::sorted_id::SortedId */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'get_sorted_id_wrapper';

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_gt
CREATE FUNCTION "sortedid_gt"(
        "left" SortedId, /* pgx_ex::sorted_id::SortedId */
        "right" SortedId /* pgx_ex::sorted_id::SortedId */
) RETURNS bool /* bool */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sortedid_gt_wrapper';

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::sortedid_gt
CREATE OPERATOR > (
        PROCEDURE="sortedid_gt",
        LEFTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        RIGHTARG=SortedId, /* pgx_ex::sorted_id::SortedId */
        COMMUTATOR = <,
        NEGATOR = <=,
        RESTRICT = scalargtsel,
        JOIN = scalargtjoinsel
);

-- src/sorted_id.rs:16
-- pgx_ex::sorted_id::SortedId
CREATE OPERATOR FAMILY SortedId_btree_ops USING btree;
CREATE OPERATOR CLASS SortedId_btree_ops DEFAULT FOR TYPE SortedId USING btree FAMILY SortedId_btree_ops AS
        OPERATOR 1 <,
        OPERATOR 2 <=,
        OPERATOR 3 =,
        OPERATOR 4 >=,
        OPERATOR 5 >,
        FUNCTION 1 sortedid_cmp(SortedId, SortedId);